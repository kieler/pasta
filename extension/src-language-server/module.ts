/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 *
 * Copyright 2023 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */


import { inject, Module } from 'langium';
import {
    DefaultDiagramServerManager,
    DiagramActionNotification,
    LangiumSprottySharedServices,
    SprottySharedServices
} from "langium-sprotty";
import { createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext } from "langium/lsp";
import { DiagramOptions } from "sprotty-protocol";
import { URI } from "vscode-uri";
import { PastaDiagramServer } from "./diagram-server.js";
import { FtaModule, FtaServices } from "./fta/fta-module.js";
import { FtaGeneratedModule, PastaGeneratedSharedModule, StpaGeneratedModule } from "./generated/module.js";
import { registerValidationChecks } from './stpa/services/stpa-validator.js';
import { STPAModule, StpaServices } from "./stpa/stpa-module.js";

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in the language module file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices;
    stpa: StpaServices;
    fta: FtaServices;
} {
    const shared = inject(createDefaultSharedModule(context), PastaGeneratedSharedModule, PastaSprottySharedModule);
    const stpa = inject(createDefaultModule({ shared }), StpaGeneratedModule, STPAModule);
    const fta = inject(createDefaultModule({ shared }), FtaGeneratedModule, FtaModule);
    shared.ServiceRegistry.register(stpa);
    registerValidationChecks(stpa);
    shared.ServiceRegistry.register(fta);
    return { shared, stpa, fta };
}

const pastaDiagramServerFactory = (
    services: LangiumSprottySharedServices
): ((clientId: string, options?: DiagramOptions) => PastaDiagramServer) => {
    const connection = services.lsp.Connection;
    const serviceRegistry = services.ServiceRegistry;
    return (clientId, options) => {
        const sourceUri = options?.sourceUri;
        if (!sourceUri) {
            throw new Error("Missing 'sourceUri' option in request.");
        }
        const language = serviceRegistry.getServices(URI.parse(sourceUri as string)) as StpaServices | FtaServices;
        if (!language.diagram) {
            throw new Error(`The '${language.LanguageMetaData.languageId}' language does not support diagrams.`);
        }
        return new PastaDiagramServer(
            async action => {
                connection?.sendNotification(DiagramActionNotification.type, { clientId, action });
            },
            language.diagram,
            clientId,
            options,
            connection,
            language
        );
    };
};

/**
 * instead of the default diagram server the stpa-diagram server is sued
 */
const PastaSprottySharedModule: Module<LangiumSprottySharedServices, SprottySharedServices> = {
    diagram: {
        diagramServerFactory: pastaDiagramServerFactory,
        DiagramServerManager: services => new DefaultDiagramServerManager(services),
    },
};
